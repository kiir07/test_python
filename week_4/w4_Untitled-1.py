# Рассмотрим, как создать свою функцию, на примере вычисления факториала. Текст программы без функции выглядит так:
n = int(input())
fact = 1
i = 2
while i <= n:
    fact *= i
    i += 1
print(fact)

# Вычисление факториала можно вынести в функцию, тогда эта же программа будет выглядеть так:
def factorial(num):
    fact = 1
    i = 2
    while i <= num:
        fact *= i
        i += 1
    return fact

n = int(input())
print(factorial(n))

# Описание функции должно идти в начале программы. На самом деле, оно может быть в любом месте, до первого вызова функции factorial.
# Команды, выполняемые в функции должны записываться с отступом, как в блоках команд if или while.

print(factorial(n) // (factorial(k) * factorial(n - k)))
# **********************************
def binomial(n, k):
    return factorial(n) // (factorial(k) * factorial(n - k))

    # Как было сказано выше, выполнение функции прерывается по команде return.
    # Для примера рассмотрим функцию поиска максимума из двух чисел, которые передаются ей в качестве параметров:

def max2(a, b):
    if a > b:
        return a
    else:
        return b
# Её можно было бы записать и по-другому:def max2(a, b):
    if a > b:
        return a
    return b

# С помощью функции max2 можно реализовать функцию max3, возвращающую максимум из трех чисел:

def max3(a, b, c):
    return max2(max2(a, b), c)    

# Возврат нескольких значений функцией
def sort2(a, b):
    if a < b:
        return a, b
    else:
        return b, a
a = int(input())
b = int(input())
minimum, maximum = sort2(a, b)
print(minimum, maximum)

# Возврат логических значений
def isEven(n):
    return n % 2 == 0

    # Результатом работы этой функции будет истина или ложь. Теперь функцию очень удобно применять в if'ах:

if isEven(n):
    print("EVEN")
else:
    print("ODD")

# Если есть сложное логическое выражение, то лучше оформить его в виде
# функции с говорящим названием - так программу будет легче читать, а вероятность ошибок в ней резко снизится.

