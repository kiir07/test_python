# Все переменные, которыми мы пользовались до сегодняшнего дня, были глобальными. Глобальные переменные видны во всех функциях программы.
def f():
    print a
a = 1
f()

# напечатает 1 и выполнится без ошибок. Переменная a - глобальная, поэтому мы можем смотреть 
# на её значение из любой функции. На момент вызова функции f переменная a уже создана, хотя описание функции и идет раньше присваивания.
def f():
    a = 1
f()
print(a)

# завершится с ошибкой "builtins.NameError: name 'a' is not defined" (переменная a не определена). 
# Переменные, значения которых изменяются внутри функции по умолчанию считаются локальными, т.е. 
# доступными только внутри функции. Как только функция заканчивает свою работу, то переменная уничтожается.

# Таким образом, если в функции происходило присваивание какой-то переменной, то эта переменная 
# считается локальной. Если присваиваний не происходило, то переменная считается глобальной.

# Локальные переменные можно называть такими же именами, как и глобальные. Например, вывод такого кода:

def f():
    a = 1
    print(a, end=' ')
a = 0
f()
print(a)

# Будет "1 0". Сначала произойдет вызов функции f, в которой будет создана локальная переменная 
# a со значением 1 (получить доступ к глобальной переменной a из функции теперь нельзя), затем
#  функция закончит свою работу и будет выведена глобальная переменная a, со значением которой ничего не случилось.

# Переменная считается локальной даже в случае, если её присваивание происходило внутри условного 
# оператора (даже если он никогда не выполнится):

def f():
    print(a)
    if False:
        a = 0
a = 1
f()

# Эта программа завершится с ошибкой builtins.UnboundLocalError: local variable 'a' 
# referenced before assignment (обращение к переменной до инициализации). 
# Любое присваивание значения переменной внутри тела функции делает переменную локальной.

# С помощью специальной команды global можно сделать так, что функция сможет изменить 
# значение глобальной переменной. Для этого нужно записать в начале функции слово global,
#  а затем через запятую перечислить имена глобальных переменных, которые функция сможет менять. Например, такой код:

def f():
    global a
    a = 1
    print(a, end=' ')
a = 0
f()
print(a)

# выведет "1 1", т.к. значение глобальной переменной будет изменено внутри функции.

# Все параметры функции являются локальными переменными со значениями, которые были переданы в функцию.
#  Параметры также можно изменять и это никак не повлияет на значения переменных в том месте, откуда была 
#  вызвана функция (если тип объектов-параметров был неизменяемым).

# Использование глобальных переменных как на чтение, так и на запись внутри функций - очень плохой тон. 
# Это связано с тем, что другие люди могут захотеть использовать некоторые отдельные функции из вашего
#  кода, которые не будут работать вне вашей программы в случае использования глобальных переменных.

# Поэтому использование глобальных переменных внутри функций в нашем курсе строго запрещено. 
# Все нужное для работы функции должно передаваться в качестве параметров.