# Все логические операции имеют приоритет ниже,
#  чем операции сравнения (а значит, и ниже чем арифметические операции). 
#  Среди логических операций наивысший приоритет имеет операция not, 
#  затем идет and и наименьший приоритет имеет операция or. 
#  На порядок выполнения операций можно влиять с помощью скобок, как и в арифметических выражениях.



# Одним из примеров использования логического выражения является проверка на делимость. 
# Например, чтобы проверить, является ли число четным, необходимо сравнить остаток от деления этого числа на два с нулём:

# isEven = number % 2 == 0

# Первая идея заключается в том, чтобы рассмотреть все возможные варианты расположения событий 
# и выделить следующий критерий пересечения: если начало или конец одного из событий лежит между 
# началом и концом другого, то они пересекаются. В виде программы это можно записать так:

# is1startIn2 = start2 <= start1 <= finish2
# is1finishIn2 = start2 <= finish1 <= finish2
# is1in2 = is1startIn2 or is1finishIn2
# is2startIn1 = start1 <= start2 <= finish1
# is2finishIn1 = start1 <= finish2 <= finish1
# is2in1 = is2startIn1 or is2finishIn1
# answer = is1in2 or is2in1


# Если немного подумать, то можно придумать более короткий критерий
#  для проверки такого пересечения: необходимо, чтобы начало первого 
#  события происходило не позже конца второго и начало второго события происходило не позже конца первого.
#  answer = start1 <= finish2 and start2 <= finish1


# Условный оператор позволяет выполнять действия в зависимости от того, 
# выполнено условие или нет. Записывается условный оператор как ''if <логическое выражение>:'', 
# далее следует блок команд, который будет выполнен только если логическое выражение приняло значение True. 
# Блок команд, который будет выполняться, выделяется отступами в 4 пробела (в IDE можно нажимать клавишу tab).

# Рассмотрим, например, задачу о нахождении модуля числа. Если число отрицательное, то необходимо заменить его на минус это число. Решение выглядит так:

# x = int(input())
# if x < 0:
#     x = -x
# print(x)


# В этой программе с отступом записана только одна строка, x = -x. При необходимости выполнить несколько команд все они
#  должны быть записаны с тем же отступом. Команда print записана без отступа, поэтому она будет 
#  выполняться в любом случае, независимо от того, было ли условие в if'е истинным или нет.

# В дополнение к if можно использовать оператор else: (иначе). Блок команд, который следует после него,
#  будет выполняться если условие было ложным. Например, ту же задачу о выводе модуля числа можно было решить, не меняя значения переменной x:

#  x = int(input())
# if x >= 0:
#     print(x)
# else:
#     print(-x)

#     Все команды, которые выполняются в блоке else, должны быть также записаны с отступом.
#      Else должен следовать сразу за блоком команд if, без промежуточных команд, выполняемых безусловно.
#       Else без соответствующего if'а не имеет смысла.

# Если после if записано не логическое выражение, то оно будет приведено к логическому, 
# как если бы от него была вызвана функция bool. Однако, злоупотреблять этим не следует, т.к. это ухудшает читаемость кода.

# Для подсчета модуля числа в Питоне существует функция abs, которая избавляет от необходимости каждый раз писать подсчет модуля вручную.

