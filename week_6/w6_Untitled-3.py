# Во многих задачах заранее неизвестно, сколько данных нам предстоит считать.
# Особенно яркий пример - это обработка текста, когда мы заранее не знаем, сколько строк нам будет введено.

# Наиболее удобно работать с такими данными не пользуясь функцией input,
# используя методы чтения файла (или ввода с консоли) целиком или построчно.

# Рассмотрим простой пример: считать все строки файла input.txt
# и вывести каждую строку развернутой в файл output.txt:

inFile = open('input.txt', 'r', encoding='utf8')
outFile = open('output.txt', 'w', encoding='utf8')
lines = inFile.readlines()
for line in lines:
    print(line[-2::-1], file=outFile)
inFile.close()
outFile.close()


# Для открытия файла используется функция open, принимающая два параметра:
# имя файла и режим открытия (''r'' для чтения и ''w'' для записи),
# а также именованный параметр encoding (значение кодировки ''utf8''
# подходит для большинства современных текстовых файлов). Эта функция возвращает ссылку на объект типа файл.

# Для чтения всех строк из файла используется метод readlines,
# который возвращает список всех строк (в смысле lines) файла.
# Обратите внимание, что строки попадают в список вместе с символом
# перевода строки, в нашей программе это учитывается при создании среза
# (этот символ последний в строке). В тестирующей системе все входные
# файлы имеют перенос строки после последней строки, в реальной жизни
# это может оказаться не так и тогда программа будет работать неверно.

# Для печати в файл мы пользуемся стандартной функцией print,
# которой передается именованный параметр file с указанием, в какой файл печатать.

# После окончания работы с файлами нужно вызвать для них методы close.

# В этой задаче, на самом деле, можно было обойтись без запоминания
# всего файла в памяти (это особенно актуально для больших файлов).
# Решение без запоминания всего файла можно было реализовать так:

inFile = open('input.txt', 'r', encoding='utf8')
outFile = open('output.txt', 'w', encoding='utf8')
for line in inFile:
    print(line[-2::-1], file=outFile)
inFile.close()
outFile.close()

# Переменные типа файл являются iterable и умеют возвращать
# очередную строку из файла, не храня его целиком в памяти.

# Также существует метод read, который позволяет считать все
# содержимое файла в одну строковую переменную (при этом содержащую в себе переводы строки \n).

# В принципе, читать до конца ввода можно и из консоли.
# Для этого нужно подключить библиотеку sys и использовать определенный в
# ней файловый дескриптор stdin в качестве файла (например, для перебора строк консоли можно написать for line in sys.stdin).
# Ввести признак конца файла в консоли можно, нажав Ctrl+Z в Windows или Ctrl+D в Unix-системах.
# В среде программирования такой способ может не работать. Более подробно в этой теме:
# https://www.coursera.org/learn/python-osnovy-programmirovaniya/discussions/all/threads/DLrJXKbWEeiD2QqOJunOiA/replies/fJUPEK4gEeix7A7XXq2u1g.

# Еще об одном способе работы с файлами с помощью конструкции with .. as ..,
# что позволяет автоматически вызывать метод close(), можно почитать здесь: http://book.pythontips.com/en/latest/open_function.html.